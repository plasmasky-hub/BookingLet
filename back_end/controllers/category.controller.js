const RootCategory = require('../models/rootCategory');
const SubCategory = require('../models/subCategory');
const ServiceInfo = require('../models/serviceInfo');
const Store = require('../models/store');
const Joi = require('joi')


/** 
 * @swagger
 *   components:
 *      schemas:
 *          rootCategory:
 *              type: Object
 *              required:
 *                  - name
 *              properties:
 *                  name:
 *                      type: string
 *                  _id:
 *                      type: objectId
 *                      description: auto generated unique identifier
 *              example:
 *                  name: beauty
 *          subCategory:
 *              type: Object
 *              required:
 *                  - name
 *                  - parentCategory
 *              properties:
 *                  name:
 *                      type: string
 *                  _id:
 *                      type: objectId
 *                      description: auto generated unique identifier
 *                  parentCategory:
 *                      type: objectId
 *                      description: Superior Category
 *              example:
 *                  name: beauty subCategory1
 *                  parentCategory: "62ab023e8c412af8a30d0dcf"                      
*/
/** 
 * @swagger
 *   /v1/rootCategory:
 *    get:
 *      summary: return all rootCategories (except discarded)
 *      tags: [Root-category]
 *      responses:
 *          200:
 *              description: array of rootCategories
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: array
 *                          items: 
 *                              $ref: '#/components/schemas/rootCategory'
 *          400:
 *              description: Invalid request
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object 
 *                          properties: 
 *                              message:
 *                                  type: string                          
*/
async function getAllRootCategories(req, res) {
    const rootCategories = await RootCategory.find({ isDiscard: false }).exec();
    res.json(rootCategories);

    /*
    const rootCategories = await RootCategory.find({ isDiscard: false }).exec();
    rootCategories.map((e)=>{
        e.backgroundPhoto = '123';
        e.save()
    })
    res.json(rootCategories);
    */
}


/* async function getRootCategoryById(req, res) {
    const { id } = req.params;
    const rootCategory = await RootCategory.findById(id).exec();
    if (!rootCategory) {
        return res.status(404).json({
            error: 'Category not found',
        });
    }
    res.json(rootCategory);
}
*/


/** 
 * @swagger
 *  /v1/rootCategory:
 *   post:
 *      summary: add a new rootCategory to database 
 *      tags: [Root-category]
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/rootCategory'
 *      responses:
 *          201:
 *              description: Successfully create a rootCategory
 *              content:
 *                  application/json:
 *                      schema: 
 *                          $ref: '#/components/schemas/rootCategory'     
 *          400:
 *              description: Invalid request
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object 
 *                          properties: 
 *                              message:
 *                                  type: string                        
*/
async function addRootCategory(req, res) {
    const validatedData = await checkRootCategory(req.body);
    if (validatedData.error !== undefined) { return res.status(404).json(validatedData.error) };

    const { name } = validatedData;     //= req.body;
    Joi.object({
        name: Joi.string().required().min(2).max(20),
    });
    const rootCategory = new RootCategory({ name });
    await rootCategory.save();
    res.status(201).json(rootCategory);
}


/** 
 * @swagger
 *  /v1/rootCategory/{rootCategoryId}:
 *   put:
 *      summary: modify a rootCategory in database, for renaming 
 *      tags: [Root-category]
 *      parameters:
 *          - in: path
 *            name: rootCategoryId
 *            required: true
 *            schema: 
 *                type: string
 *            description: Unique ID automatically generated by mongodb
 *            example: '62a612b87645da1c405c0daa'
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/rootCategory'
 *      responses:
 *          200:
 *              description: Successfully update a rootCategory
 *              content:
 *                  application/json:
 *                      schema: 
 *                          $ref: '#/components/schemas/rootCategory'     
 *          400:
 *              description: Invalid request
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object 
 *                          properties: 
 *                              message:
 *                                  type: string     
 *                      
*/
//This function is used for renaming (and does not affect the association)
async function updateRootCategoryById(req, res) {
    const validatedData = await checkRootCategory(req.body);
    if (validatedData.error !== undefined) { return res.status(404).json(validatedData.error) };

    const { id } = req.params;
    const { name } = validatedData;     //= req.body;
    const rootCategory = await RootCategory.findByIdAndUpdate(id, { name }, { new: true }).exec();
    if (!rootCategory) {
        return res.status(404).json({
            error: 'Category not found',
        });
    }
    res.json(rootCategory);
}


/** 
 * @swagger
 *   /v1/rootCategory/{rootCategoryId}:
 *    delete:
 *      summary: pseudo-delete a rootCategory by ID, if it doesn't associate with other collections
 *      tags: [Root-category]
 *      parameters:
 *          - in: path
 *            name: rootCategoryId
 *            required: true
 *            schema: 
 *                type: string
 *            description: Unique ID automatically generated by mongodb
 *            example: '62aa9cd1a97477014bf74b8f'
 *      responses:
 *          204:
 *              description: Successfully discard an rootCategory
 *          400:
 *              description: Invalid request
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object 
 *                          properties: 
 *                              message:
 *                                  type: string    
 *          403:
 *              description: Server refused to delete because the data has an associated item.
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          properties:
 *                              message:
 *                                  type: string
 *                              associatedItem:
 *                                  type: object or array                                         
*/
async function discardRootCategoryById(req, res) {
    const { id } = req.params;
    const refSubCategory = await SubCategory.find({ parentCategory: id, isDiscard: false }).exec();
    const refServiceInfo = await ServiceInfo.find({ rootCategory: id, isDiscard: false }).exec();
    const refStore = await Store.find({ rootCategories: id, isDiscard: false }).exec();

    if (refSubCategory.length !== 0 || refServiceInfo.length !== 0 || refStore.length !== 0) {
        return res.status(403).json({
            error: 'Deletion failed, this root-Category has associated items',
            refSubCategory,
            refServiceInfo,
            refStore
        });
    } else {
        const rootCategory = await RootCategory.findByIdAndUpdate(id, { isDiscard: true }, { new: true }).exec();
        if (!rootCategory) {
            return res.status(404).json({
                error: 'Category info not found',
            });
        }
        res.sendStatus(204);
    }
}


async function getDiscardedRootCategories(req, res) {
    const rootCategories = await RootCategory.find({ isDiscard: true }).exec();
    res.json(rootCategories);
}


/** 
 * @swagger
 *   /v1/subCategory:
 *    get:
 *      summary: return all subCategories (except discarded)
 *      tags: [Subcategory]
 *      responses:
 *          200:
 *              description: array of subCategories
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: array
 *                          items: 
 *                              $ref: '#/components/schemas/subCategory'
 *          400:
 *              description: Invalid request
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object 
 *                          properties: 
 *                              message:
 *                                  type: string                          
*/
async function getAllSubCategories(req, res) {
    let { rootCategoryId } = req.query;
    let searchQuery = { isDiscard: false };
    if (rootCategoryId !== undefined) { searchQuery.parentCategory = rootCategoryId };
    const subCategories = await SubCategory.find(searchQuery, { __v: 0, id: 0, isDiscard: 0 }).populate('parentCategory', { name: 1 }).exec();
    res.json(subCategories);
}


/*async function getSubCategoryById(req, res) {
    const { id } = req.params;
    const subCategory = await SubCategory.findById(id).populate('parentCategory').exec();
    if (!subCategory) {
        return res.status(404).json({
            error: 'Subcategory not found',
        });
    }
    res.json(subCategory);
}
*/


/** 
 * @swagger
 *  /v1/subCategory:
 *   post:
 *      summary: add a new subCategory to database 
 *      tags: [Subcategory]
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/subCategory'
 *      responses:
 *          201:
 *              description: Successfully create a subCategory
 *              content:
 *                  application/json:
 *                      schema: 
 *                          $ref: '#/components/schemas/subCategory'     
 *          400:
 *              description: Invalid request
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object 
 *                          properties: 
 *                              message:
 *                                  type: string                        
*/
async function addSubCategory(req, res) {
    const validatedData = await checkSubCategory(req.body);
    if (validatedData.error !== undefined) { return res.status(404).json(validatedData.error) };

    const { name, parentCategory } = validatedData;     //= req.body;
    const subCategory = new SubCategory({ name, parentCategory });
    subCategory.parentCategory = parentCategory;

    await subCategory.save();
    res.status(201).json(subCategory);
}


/** 
 * @swagger
 *  /v1/subCategory/{subCategoryId}:
 *   put:
 *      summary: modify a subCategory in database, for renaming 
 *      tags: [Subcategory]
 *      parameters:
 *          - in: path
 *            name: subCategoryId
 *            required: true
 *            schema: 
 *                type: string
 *            description: Unique ID automatically generated by mongodb
 *            example: '62a6c5dba07b5b979b3ec2ae'
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/subCategory'
 *      responses:
 *          200:
 *              description: Successfully update a subCategory
 *              content:
 *                  application/json:
 *                      schema: 
 *                          $ref: '#/components/schemas/subCategory'     
 *          400:
 *              description: Invalid request
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object 
 *                          properties: 
 *                              message:
 *                                  type: string     
 *                      
*/
//This function is used to rename and change the parentCategory (and does not affect the association)
async function updateSubCategoryById(req, res) {
    const { id } = req.params;
    const { name } = req.body;
    const subCategory = await SubCategory.findByIdAndUpdate(id, { name }, { new: true }).exec();
    if (!subCategory) {
        return res.status(404).json({
            error: 'Subcategory not found',
        });
    }
    res.json(subCategory);
}


/** 
 * @swagger
 *   /v1/subCategory/{subCategoryId}:
 *    delete:
 *      summary: pseudo-delete a subCategory by ID, if it doesn't associate with other collections
 *      tags: [Subcategory]
 *      parameters:
 *          - in: path
 *            name: subCategoryId
 *            required: true
 *            schema: 
 *                type: string
 *            description: Unique ID automatically generated by mongodb
 *            example: '62ab045bb3d4f5468de597be'
 *      responses:
 *          204:
 *              description: Successfully discard a subCategory
 *          400:
 *              description: Invalid request
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object 
 *                          properties: 
 *                              message:
 *                                  type: string     
 *          403:
 *              description: Server refused to delete because the data has an associated item.
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          properties:
 *                              message:
 *                                  type: string
 *                              associatedItem:
 *                                  type: object or array                          
*/
async function discardSubCategoryById(req, res) {
    const { id } = req.params;
    const refServiceInfo = await ServiceInfo.find({ subCategories: id, isDiscard: false }).exec();

    if (refServiceInfo.length !== 0) {
        return res.status(403).json({
            error: 'Deletion failed, this subcategory has associated items',
            refServiceInfo
        });
    } else {
        const subCategory = await SubCategory.findByIdAndUpdate(id, { isDiscard: true }, { new: true }).exec();
        if (!subCategory) {
            return res.status(404).json({
                error: 'Subcategory info not found',
            });
        }
        res.sendStatus(204);
    }
}


async function checkRootCategory(data) {
    const schema = Joi.object({
        name: Joi.string().required().min(2).max(30),
    });

    const validatedData = await schema.validateAsync(data, { allowUnknown: true, stripUnknown: true });
    return validatedData;
}


async function checkSubCategory(data) {
    const schema = Joi.object({
        name: Joi.string().required().min(2).max(30),
        parentCategory: Joi.required()
    });

    const validatedData = await schema.validateAsync(data, { allowUnknown: true, stripUnknown: true });
    return validatedData;
}


async function getDiscardedSubCategories(req, res) {
    const subCategories = await SubCategory.find({ isDiscard: true }).populate('parentCategory').exec();
    res.json(subCategories);
}


module.exports = {
    getAllRootCategories,
    //getRootCategoryById,
    addRootCategory,
    updateRootCategoryById,
    discardRootCategoryById,
    getDiscardedRootCategories,

    getAllSubCategories,
    addSubCategory,
    updateSubCategoryById,
    discardSubCategoryById,
    getDiscardedSubCategories
}