pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID       = "229848107216"
        AWS_DEFAULT_REGION   = "ap-southeast-2"
        AWS_CREDENTIALS      = "AWS-DevOps-credentials"
	    CLUSTER_NAME         = "Bookinglet-ecs-${params.workspace}"
	    SERVICE_NAME         = "Bookinglet-${params.workspace}"
	    TASK_DEFINITION_NAME = "apptask-${params.workspace}"
        IMAGE_REPO_NAME      = "bookinglet-${params.workspace}"
        IMAGE_TAG            = "latest"
        REPOSITORY_URI       = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }
    parameters {
        choice choices: ['uat', 'prod'], description: 'choose Workspace', name: 'workspace'
    }
    stages {
        stage('login') {
            steps {
                dir('./back_end/') {
                    withAWS(credentials: "${AWS_CREDENTIALS}", region: "${AWS_DEFAULT_REGION}") {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com'
                    }   
                }
            }
        }
        stage('Building image') {
            steps {
                dir('./back_end'){
                    echo "Building images..."
                    sh 'docker build -t ${IMAGE_REPO_NAME} .' 
                }
            }
        }
        stage('Push image') {
            steps {
                dir('./back_end'){
                    withAWS(credentials: "${AWS_CREDENTIALS}", region: "${AWS_DEFAULT_REGION}") {
                        echo "Push image to ECR"
                        sh 'docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}'
                        sh 'docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}' 
                        sh 'aws ecs update-service --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}" --task-definition "${TASK_DEFINITION_NAME}"'
                    }
                }
            }
        }    
    }
    post {
        always {
            cleanWs()
        }
    }
}