pipeline{
    agent none
    parameters {
        string defaultValue: '123456789000', description: 'Usually, a 12 digitals number appears on your account information', name: 'Please Input your AWS Account ID ', trim: true
        choice choices: ['ap-southeast-2', 'us-east-1'], name: 'Which region are you going to deploy?'
        choice choices: ['Production'], name: 'Which Environment are you going to deploy?'
        string defaultValue: 'latest', description: 'Name the Tag Version, e.g. 1.0.1', name: 'Please Input your Tag ', trim: true
    }
    environment {
        PROJECT_ENV = "Production"
        PROJECT_NAME = "BookingLet-BackEnd"
        AWS_CREDENTIALS = "AWS-Credentials-Root-AccessKey"
        AWS_ACCOUNT_ID = "${params['Please Input your AWS Account ID ']}"
        AWS_DEFAULT_REGION = "${params['Which region are you going to deploy?']}"
        AWS_IMAGE_REPO = "bookinglet-backend"
        AWS_IMAGE_TAG = "${params['Please Input your Tag ']}"
        AWS_CLUSTER_NAME = "bookinglet-backend-cluster"
        AWS_SERVICE_NAME = "bookinglet-backend-service"
        AWS_TASK_DEFINITION_NAME = "bookinglet-backend-task"
        AWS_ECS_DESIRED_COUNT = "1"
        EMAIL_RECIPIENT = "fxy4560654@gmail.com"
    }
    stages {
        stage("Input Message Confirm"){           
            options {
                timeout(time: 300, unit: 'SECONDS')
            }
            when {
                allOf {                        
                environment name: 'PROJECT_ENV', value: 'Production'
                environment name: 'PROJECT_NAME', value: "${PROJECT_NAME}"
                expression{ params['Which Environment are you going to deploy?'] == 'Production' }
                }
                beforeInput true
            }
            input {
                message "Everything looks good?"
                ok "Yes, proceed."               
                parameters {
                    booleanParam defaultValue: true, description: 'I\'ve checked all resources are setting well.', name: 'Check all configs one more time'
                }
            }
            steps {
                echo "Input Confirmed. Not Skip this stage"
            }
        }
        stage('BuildImage'){
            agent {
                label 'agent2'
            }
            when {                      
                expression{ params['Which Environment are you going to deploy?'] == 'Production' }
            }               
            steps {
                dir('./back_end/'){
                    sh "docker build -t ${AWS_IMAGE_REPO}:${AWS_IMAGE_TAG} ."
                }
            }
        }
        stage('Login ECR'){
            agent {
                label 'agent2'
            }   
            steps {
                dir('./back_end/'){
                    withAWS(credentials: "${AWS_CREDENTIALS}", region: "${AWS_DEFAULT_REGION}"){
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                    }
                }
            }
        }
        stage('Push to ECR'){
            agent {
                label 'agent2'
            } 
            steps {
                dir('./back_end/'){
                    withAWS(credentials: "${AWS_CREDENTIALS}", region: "${AWS_DEFAULT_REGION}"){
                    sh "docker tag ${AWS_IMAGE_REPO}:${AWS_IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_IMAGE_REPO}:${AWS_IMAGE_TAG}"
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_IMAGE_REPO}:${AWS_IMAGE_TAG}"
                    sh "aws ecs update-service --cluster ${AWS_CLUSTER_NAME} --service ${AWS_SERVICE_NAME} --task-definition ${AWS_TASK_DEFINITION_NAME} --desired-count ${AWS_ECS_DESIRED_COUNT}"
                    }
                }
            }
        }
        stage('Clean Cache'){
            agent {
                label 'agent2'
            } 
            steps {
                dir('./back_end/'){
                    sh "docker rmi ${AWS_IMAGE_REPO}:${AWS_IMAGE_TAG}"
                    sh "docker rmi ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_IMAGE_REPO}:${AWS_IMAGE_TAG}"
                }
                cleanWs()
            }
        }
    }
    post{
        success {
            echo " .................Deploy Successfully..................\n Congratulations! \n you have successfully passed the CI & CD process: \n Project Name:  ${PROJECT_NAME} \n Deploy Environemt:  ${PROJECT_ENV}"
            emailext attachLog: true, body: """You get this email because your pipeline job in  
                            project name:  ${ PROJECT_NAME } 

                            working environment:  ${ PROJECT_ENV } environment

                            has been successfully deployed.

                            Please go check the log attached.
                            """, subject: "You have successfully deployed an ${ PROJECT_ENV } environment in Main branch!!", to: "${ EMAIL_RECIPIENT } "
        }
        failure {
            echo ".................Deploy Fail .................\n A job log has been sent to the recipient.\n Please go to your mailbox to check."
            emailext attachLog: true, body: """You get this email because your pipeline job in  
                            project name:  ${ PROJECT_NAME } 

                            working environment:  ${ PROJECT_ENV } environment

                            has been failed.

                            Please go check the log attached.
                            """, subject: "You have an ${ PROJECT_ENV } deployment which has been failed in Main branch!", to: "${ EMAIL_RECIPIENT } "
        }
    }
}
